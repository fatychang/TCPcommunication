#include <iostream>
#include <WS2tcpip.h>

#pragma comment (lib, "ws2_32.lib")


void server_init();
void server_connect();



using namespace std;


int PORT = 4321;
SOCKET listening;
SOCKET clientSocket;


void main()
{
	// Initialize the server
	server_init();

	// Wait for the connection
	server_connect();

	

	// While loop: accept and echo msg back to client
	char buf[4096];

	while (true)
	{

		ZeroMemory(buf, 4096);

		// Wait for client to send data
		int bytesReceived = recv(clientSocket, buf, 4096, 0); // The number of bytes received
		if (bytesReceived == SOCKET_ERROR)
		{
			cerr << "Error in recv(). Quitting" << endl;
			break;
		}
		if (bytesReceived == 0)
		{
			cout << "Client disconnected" << endl;
			break;
		}

		// Print out the received message
		cout << "Client" << " : " << buf << endl;

		// Echo message back to client
		send(clientSocket, buf, bytesReceived + 1, 0); // Add 1 to include the starting header in C++ string format
	}

	// Close the socket
	closesocket(clientSocket);

	// Cleanup winsock
	WSACleanup();

}



void server_init()
{
	// Initialize winsock
	WSADATA wsData;
	WORD ver = MAKEWORD(2, 2);

	int wsOK = WSAStartup(ver, &wsData);
	if (wsOK != 0)
	{
		cerr << "Can't Initialize WinSock! Quitting" << endl;
		return;
	}
	else
	{
		// cout << "WinSock Initialized." << endl;
	}

	// Create a socket
	listening = socket(AF_INET, SOCK_STREAM, 0);
	if (listening == INVALID_SOCKET)
	{
		cerr << "Can't create a socket! Quitting" << endl;
		return;
	}
	else
	{
		cout << "Server socket created." << endl;
	}

	// Bind the socket to the ip address and port
	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(PORT);
	hint.sin_addr.S_un.S_addr = INADDR_ANY;

	bind(listening, (sockaddr*)&hint, sizeof(hint));

	// Tell winsock the socket is for listening
	listen(listening, SOMAXCONN);
}

void server_connect()
{
	sockaddr_in client;
	int clientSize = sizeof(client);

	clientSocket = accept(listening, (sockaddr *)&client, &clientSize);
	if (clientSocket == INVALID_SOCKET)
	{
		cerr << "INVALID CLIENT SOCKET." << endl;
	}

	char host[NI_MAXHOST];		// Client's remote name
	char service[NI_MAXHOST];	// Service (i.e. port) the client is connect on

	ZeroMemory(host, NI_MAXHOST);	// same as memset(host, 0,NI_MAXHOST)
	ZeroMemory(service, NI_MAXHOST);

	if (getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0) == 0)
	{
		cout << host << " connected on port " << service << endl;
	}
	else
	{
		inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
		cout << host << "connected on port " << ntohs(client.sin_port) << endl;
	}
	cout << "Connected and waiting for the next message..." << endl;

	// Close listening socket
	closesocket(listening);
}
