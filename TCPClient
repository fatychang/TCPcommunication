#include <iostream>
#include <WS2tcpip.h>
#include <string>
#include <thread> // std::thread
#pragma comment(lib, "ws2_32.lib")

using namespace std;

void client_init();
void client_connect();
void client_terminate();
void client_sender();
void client_receiver();

string IPADDRESS = "10.25.140.33";	// IP for the server
int PORT = 4321;		// Port for the server
SOCKET sock;

void main()
{
	// Activate the client_send thread
	thread th_sender (client_sender);
	thread th_receiver(client_receiver);
	th_receiver.join();



}

void client_sender()
{
	char buf[4096];
	string userInput;
	
	
	// Initialize the client
	client_init();

	// Connect to the server
	client_connect();

	// Send the message if necessary
	do
	{
		userInput = "hello";
		// Promet the user for some text
		//cout << "> ";
		//getline(cin, userInput);
		userInput = userInput + "\n";

		// Send the text
		if (userInput.size() > 0) // Make sure the user has typed in something
		{
			int sendResult = send(sock, userInput.c_str(), userInput.size() + 1, 0);
		}

		// Sleep the thread for a particular time (in ms)
		std::chrono::milliseconds ms(1000);
		std::this_thread::sleep_for(ms);

	} while (userInput.size() > 0);

	client_terminate();

}

void client_receiver()
{
	cout << "client_receiver created." << endl;
	char buf[4096];


	// Initialize the client
	client_init();

	// Connect to the server
	client_connect();

	// Wait for the message
	while (true)
	{
		int bytesReceived = recv(sock, buf, 4096, 0); // The number of bytes received
		if (bytesReceived == SOCKET_ERROR)
		{
			cerr << "Error in recv(). Quitting" << endl;
		}
		if (bytesReceived == 0)
		{
			cout << "Client disconnected" << endl;
		}

		// Print out the received message
		cout << "Server: " << buf << endl;
	}

	// Terminate thread
	client_terminate();
	
}


void client_init()
{
	// Initialize WinSock
	WSADATA data;
	WORD ver = MAKEWORD(2, 2);
	int wsResult = WSAStartup(ver, &data);
	if (wsResult != 0)
	{
		cerr << "Can't start winsock, Err #" << wsResult << endl;
		return;
	}

	// Create socket
	sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock == INVALID_SOCKET)
	{
		cerr << "Can't create socket, Err #" << sock << endl;
		WSACleanup();
		return;
	}

}

void client_connect()
{
	// Fill in a hint structure
	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(PORT);
	inet_pton(AF_INET, IPADDRESS.c_str(), &hint.sin_addr);

	// Connect to the server
	int connResult = connect(sock, (sockaddr*)&hint, sizeof(hint));
	if (connResult == SOCKET_ERROR)
	{
		cerr << "Can't connect to server, Err #" << WSAGetLastError() << endl;
		closesocket(sock);
		WSACleanup();
		return;
	}
	else
	{
		cout << "Connected!" << endl;
	}
}

void client_terminate()
{
	// Gracefully close down everything
	closesocket(sock);
	WSACleanup();
}
